C166 COMPILER V7.53.0.0, TDC_FUNCTIONS                                                     10/15/2016 15:44:58 PAGE 1   


C166 COMPILER V7.53.0.0, COMPILATION OF MODULE TDC_FUNCTIONS
OBJECT MODULE PLACED IN tdc_functions.OBJ
COMPILER INVOKED BY: C:\Program Files\Keil\C166\BIN\C166.EXE tdc_functions.c COMPACT BROWSE NOFIXDPP MOD167 DEBUG TABS(2
                    -) 

 stmt lvl     source

    1         #include "tdc_functions.h"
    2         #include <stdio.h>                /* standard I/O .h-file              */
    3         #include <reg167.h>               /* special function register 80C167  */
    4         
    5         #define TDC_BASE_ADDR 0x40000
    6         //#define TDC_BASE_ADDR 32790 //used for simulation
    7         
    8         unsigned short FIFO0 = 0;
    9         
   10         void init_tdc(void)
   11         {
   12  1        //TDC_OEn2 - p2.0 //0 - contineous read from TDC
   13  1        DP2|= (1<<0); //output
   14  1        P2|= (1<<0);//1 - no contineous red
   15  1        
   16  1        //TDC_ALU_trig - p2.1 //1 - start TDC ALU
   17  1        DP2|= (1<<1); //output
   18  1        P2&= ~(1<<1);//0 - no start
   19  1        
   20  1        //DisTDC_IN - p2.2 //1 - disable TDC start and stop
   21  1        DP2|= (1<<2); //output
   22  1        P2|= (1<<2);//1 - disable is ON
   23  1        
   24  1        //TDC_RES_N - p3.6 //0 - reset TDC
   25  1        DP3|= (1<<6); //output
   26  1        P3|= (1<<6);//1 - no reset
   27  1        
   28  1        switch_tdc_to_16bit_mode();
   29  1        
   30  1        //configure TDC registers
   31  1        //tdc_write_data( 0,0x000008B); // Rising edges, Start ringoscil.
   32  1        tdc_write_data( 0,(1<<0)|(1<<1)|(1<<3)|(1<<5)|(1<<7)); // Rising edges, Start ringoscil.
   33  1        tdc_write_data(1,0x0620620); // Channel adjust = 6 & 2
   34  1        tdc_write_data(2,0x0062004); // R-Mode, channel adjust = 6 & 2
   35  1        tdc_write_data(3,0x000001E); // Use LVPECL inputs, MSet = 30
   36  1        tdc_write_data(4,0x6000300); // EFlagHiZN, Quiet Mode, M-Mode
   37  1        tdc_write_data(5,0x0000000); // -
   38  1        tdc_write_data(6,0x8000000); // Switch on ECL power
   39  1        tdc_write_data(7,0x0001FB4); // Bin = 0.8850ps (resolution ~ 10ps rms)
   40  1        tdc_write_data(11,0); // 0 -> ErrFlagPin
   41  1        tdc_write_data(12,0); // 0 -> IrFlagPin
   42  1        
   43  1        tdc_master_reset();// Master reset
   44  1      }
   45         
   46         __inline void tdc_start_measure(void)
   47         {
   48  1        P2&= ~(1<<2);//0 - disable is OFF
   49  1      }
   50         
   51         
   52         __inline void tdc_stop_measure(void)
   53         {
   54  1        P2|= (1<<2);//1 - disable is ON
C166 COMPILER V7.53.0.0, TDC_FUNCTIONS                                                     10/15/2016 15:44:58 PAGE 2   

   55  1      }
   56         
   57         
   58         void tdc_read_measurements(void)
   59         {
   60  1        unsigned char i;
   61  1        
   62  1        if(tdc_tdc_cheek_hit_flag() == 0) //11bit - (1 - HIT fifo is empty)/(0 - data present)
   63  1        {
   64  2          P2|= (1<<1);//1 - start TDC ALU
   65  2          for (i=0;i<6;i++) __asm { nop    ; another nop}
   66  2          FIFO0 = tdc_read_fifo0();// Read FIFO0
   67  2        }
   68  1        else
   69  1        {
   70  2          FIFO0 = 0;
   71  2        }
   72  1        P2&= ~(1<<1);//0 - stop TDC ALU
   73  1        
   74  1        tdc_master_reset();// Master reset
   75  1      }
   76         
   77         //read 24bit data from TDC
   78         unsigned long tdc_read_data(unsigned char adr)
   79         {
   80  1        unsigned short tmp_value;
   81  1        unsigned long result;
   82  1        volatile  unsigned short far *tmp_adr = (unsigned short far *)(TDC_BASE_ADDR + (adr<<1));//adress is shif
             -ted at bus
   83  1      
   84  1        ((unsigned short *)&result)[0] = *tmp_adr;
   85  1        tmp_value = *tmp_adr & 0x00FF;//MSW
   86  1        ((unsigned short *)&result)[1] = tmp_value;
   87  1        return result;
   88  1      }
   89         
   90         void switch_tdc_to_16bit_mode(void)
   91         {
   92  1        unsigned char far *tmp_adr = (unsigned char far *)(TDC_BASE_ADDR + 14*2);//adress is shifted at bus
   93  1        *tmp_adr = 0x10;
   94  1        //*tmp_adr = 0x00; //do not work
   95  1      }
   96         
   97         
   98         void tdc_write_data(unsigned char adr, unsigned long value)
   99         {
  100  1        volatile unsigned short far *tmp_adr = (unsigned short far *)(TDC_BASE_ADDR + (adr<<1));//adress is shift
             -ed at bus
  101  1        
  102  1        *tmp_adr = (unsigned short)(value & 0xffff);//LSW
  103  1        *tmp_adr = (unsigned short)((value>>16) & 0xffff);//MSW
  104  1      }
  105         
  106         void tdc_master_reset(void)
  107         {
  108  1        volatile unsigned short far *tmp_adr = (unsigned short far *)(TDC_BASE_ADDR + (4<<1));//adress is shifted
             - at bus
  109  1          
  110  1        *tmp_adr = (unsigned short)(0x6400300 & 0xffff);//LSW
  111  1        *tmp_adr = (unsigned short)((0x6400300>>16) & 0xffff);//MSW
  112  1      }
  113         
C166 COMPILER V7.53.0.0, TDC_FUNCTIONS                                                     10/15/2016 15:44:58 PAGE 3   

  114         //specialised for quicker run
  115         unsigned short tdc_read_fifo0(void)
  116         {
  117  1        unsigned short tmp_value;
  118  1        unsigned long result;
  119  1        unsigned short result2;
  120  1        volatile  unsigned short far *tmp_adr = (unsigned short far *)(TDC_BASE_ADDR + (8<<1));//adress is shifte
             -d at bus
  121  1      
  122  1        ((unsigned short *)&result)[0] = *tmp_adr;
  123  1        tmp_value = *tmp_adr & 0x00FF;//MSW
  124  1        ((unsigned short *)&result)[1] = tmp_value;
  125  1        result = result&0x7FFFFF;
  126  1        result2 = (unsigned short)(result/16);
  127  1        return result2;
  128  1      }
  129         
  130         //cheek if internal hit fifo flag is set
  131         unsigned short tdc_tdc_cheek_hit_flag(void)
  132         {
  133  1        volatile  unsigned short tmp_value1;
  134  1        volatile  unsigned short tmp_value2;
  135  1        volatile  unsigned short far *tmp_adr = (unsigned short far *)(TDC_BASE_ADDR + (12<<1));//adress is shift
             -ed at bus
  136  1      
  137  1        tmp_value1 = *tmp_adr;
  138  1        tmp_value2 = *tmp_adr;//not used, for reading stability
  139  1        if (tmp_value1 & (1<<11)) return 1; else return 0;
  140  1      }


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         436     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =           2     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =           6     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
