C166 COMPILER V7.53.0.0, TIMER                                                             10/15/2016 19:56:59 PAGE 1   


C166 COMPILER V7.53.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN timer.OBJ
COMPILER INVOKED BY: C:\Program Files\Keil\C166\BIN\C166.EXE timer.c COMPACT BROWSE NOFIXDPP MOD167 DEBUG TABS(2) 

 stmt lvl     source

    1         #include "timer.h"
    2         #include <stdio.h>                /* standard I/O .h-file              */
    3         #include <reg167.h>               /* special function register 80C167  */
    4         #include "measure_dist.h"
    5         
    6         //total captured points = 1000-2*N_ANGLE
    7         #define N_ANGLE 145
    8         #define ZERO_POS  (unsigned short)(750)
    9         #define START_POS (unsigned short)(ZERO_POS+N_ANGLE)
   10         #define STOP_POS  (unsigned short)(ZERO_POS-N_ANGLE)
   11         
   12         
   13         unsigned short capture_old_time = 0;
   14         unsigned short capture_now_time = 0;
   15         volatile unsigned short enc_period = 0;
   16         volatile unsigned short encoder_pos = 0;
   17         volatile unsigned short encoder_max_pos = 0;
   18         
   19         unsigned short set_motor_period = 257;//needed motor speed (needed period of encoder)
   20         
   21         unsigned char capture_enabled = 0;
   22         unsigned char start_send_header = 0;//time to send header
   23         
   24         extern unsigned short cur_dist_value;
   25         unsigned short tmp_dist_value;
   26         
   27         //used to calculate distance to reference plate
   28         signed short curr_zero_value = 0;
   29         signed short prev_zero_value = 0;
   30         
   31         //syncro input
   32         unsigned char start_sync = 0;
   33         unsigned char stop_sync = 0;
   34         
   35         //timer to capture encoder
   36         void init_timer2_3(void)
   37         {
   38  1        //Encoder input
   39  1        DP3&= ~(1<<7); //input
   40  1        
   41  1        //ENCODER enable output
   42  1        DP2|= (1<<14); //output
   43  1        P2&= ~(1<<14);//0 - enable encoder
   44  1        
   45  1        //aux timer
   46  1        T2CON = (1<<6) | (5<<3) | (3<<0);//run + capture mode + any edge
   47  1        
   48  1        //core timer
   49  1        T3CON = (0<<3) | (1<<6);//timer mode + run
   50  1        
   51  1        T2IC = (0xF<<2) | (3);//ILVL = 0xF + GLVL = 3
   52  1        T3IE = 0;
   53  1        T2IE = 1;
   54  1      }
   55         
C166 COMPILER V7.53.0.0, TIMER                                                             10/15/2016 19:56:59 PAGE 2   

   56         //timer to controll motor speed
   57         static void timer2 (void) interrupt 0x22 
   58         {
   59  1        static unsigned short enc_period_old = 0;
   60  1        capture_old_time = capture_now_time;
   61  1        capture_now_time = T2;
   62  1        
   63  1        //overflow control
   64  1        enc_period_old = enc_period;
   65  1        if (capture_now_time >= capture_old_time) {enc_period = capture_now_time - capture_old_time;} else {enc_p
             -eriod = 0xFFFF - capture_old_time + capture_now_time;}
   66  1        if (enc_period > 1000) enc_period = 1000;
   67  1      
   68  1        encoder_pos++;
   69  1        
   70  1        if ((enc_period_old*2) < enc_period)//zero found
   71  1        {
   72  2          encoder_max_pos = encoder_pos;//998 is normal
   73  2          encoder_pos = 0;
   74  2        }
   75  1        
   76  1        if ((capture_enabled == 0) && (encoder_pos == START_POS)) 
   77  1        {
   78  2          //starting capture
   79  2          capture_enabled=1;
   80  2          if ((P5 & (1<<3))!= 0) {start_sync = 1;} else {start_sync = 0;}//check sync line
   81  2        }
   82  1        else if ((capture_enabled == 1) && (encoder_pos == STOP_POS)) 
   83  1        {
   84  2          //stop capture
   85  2          capture_enabled=0;
   86  2          if ((P5 & (1<<3))!= 0) {stop_sync = 1;} else {stop_sync = 0;}//check sync line
   87  2        }
   88  1        else if ((capture_enabled == 0) && (encoder_pos == (ZERO_POS-1)))//null reference distance measurement
   89  1        {
   90  2          do_measure();
   91  2          if (cur_dist_value < 2000)
   92  2          {
   93  3            curr_zero_value = prev_zero_value + (((signed short)cur_dist_value - prev_zero_value)/8);//exponential 
             -filter
   94  3            prev_zero_value = curr_zero_value;
   95  3            if ((curr_zero_value > 20000) && (curr_zero_value < 0)) {curr_zero_value = 200; prev_zero_value = 200;}
   96  3          }
   97  2          
   98  2          start_send_header = 1;//time to send header
   99  2        }
  100  1        else if ((capture_enabled == 0) && (encoder_pos == STOP_POS+1)) //sending syncro result - last value
  101  1        {
  102  2          if (start_sync != stop_sync) tmp_dist_value = 3;
  103  2          else tmp_dist_value = (unsigned short)(start_sync+1);//equal
  104  2          //start tx
  105  2          S0TIE = 1;//enable interrupt
  106  2          S0TBUF = (unsigned char)(tmp_dist_value>>8);
  107  2        }
  108  1        
  109  1        
  110  1        if (capture_enabled == 1)
  111  1        {
  112  2          do_measure();
  113  2          if (cur_dist_value > curr_zero_value)//normal
  114  2          {
  115  3            tmp_dist_value = cur_dist_value-curr_zero_value;//store distance value with correction
C166 COMPILER V7.53.0.0, TIMER                                                             10/15/2016 19:56:59 PAGE 3   

  116  3          }
  117  2          else
  118  2          {
  119  3            tmp_dist_value = 0;
  120  3          }
  121  2          
  122  2          S0TIE = 1;//enable interrupt
  123  2          S0TBUF = (unsigned char)(tmp_dist_value>>8);
  124  2        }
  125  1        
  126  1        
  127  1        
  128  1      }
  129         
  130         //TX interrupt
  131         static void uart_tx (void) interrupt 0x2A
  132         {
  133  1        S0TIE = 0;//disable interrupt
  134  1        S0TBUF = (unsigned char)(tmp_dist_value & 0x00FF);
  135  1      }
  136         
  137         
  138         void init_timer4(void)
  139         {
  140  1        //aux timer
  141  1        T4CON = (1<<6) | (0<<3) | (1<<7);//run + timer mode + down mode
  142  1        T4IC = (1<<2) | (1);//ILVL = 1 + GLVL = 1
  143  1        T4IE = 1;
  144  1      }
  145         
  146         static void timer4 (void) interrupt 0x24 
  147         {
  148  1        T4 = 4125;
  149  1        motor_controlling_function();
  150  1      }
  151         
  152         void motor_controlling_function(void)
  153         {
  154  1        signed short error = (signed short)set_motor_period - (signed short)enc_period;
  155  1        if (error > 5)
  156  1        {
  157  2            DP3|= (1<<15); //output
  158  2            P3|= (1<<15);//1 - to low speed
  159  2        }
  160  1        else if (error < (-5))
  161  1        {
  162  2            DP3|= (1<<15); //output
  163  2            P3&= ~(1<<15);//0 - to high speed
  164  2        }
  165  1        else 
  166  1        {
  167  2            DP3&= ~(1<<15); //input - no speed change
  168  2        }
  169  1      }


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         654     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
C166 COMPILER V7.53.0.0, TIMER                                                             10/15/2016 19:56:59 PAGE 4   

  NEAR-DATA SIZE   =          24     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =          78     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
